--[[
    DEVELOPER GUI
    
    Advanced logging interface for developers with real-time streaming,
    filtering, search, export capabilities, and group rank authentication.

    Only available to authorized developers based on group rank or UserId.
    Access via set keybind or chat command (/logs)

    This file was partially generated by GUI2Lua.    
]] local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local GroupService = game:GetService("GroupService")
local TextChatService = game:GetService("TextChatService")

local LoggerConfig = require(script.Parent.LoggerConfig)

local LoggerGUI = {}

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- GUI State
local MainFrame = nil
local LogContainer = nil
local SearchBox = nil
local FilterFrame = nil
local ExportFrame = nil
local StatsFrame = nil
local IsGUIOpen = false
local CurrentLogs = {}
local FilteredLogs = {}
local CurrentFilters = {
  level = nil,
  title = nil,
  message = nil,
  scriptName = nil,
  server = nil
}

-- Update loop
local UpdateConnection = nil
local LastUpdate = 0
local ScrollToBottom = true

-- // AUTHENTICATION
function LoggerGUI.IsUserDeveloper()
  local userId = LocalPlayer.UserId

  -- Check fallback UserIds first
  for _, devId in ipairs(LoggerConfig.DEV_AUTHENTICATION.FALLBACK_USERIDS) do
    if userId == devId then
      return true
    end
  end

  -- Check group rank
  if LoggerConfig.DEV_AUTHENTICATION.GROUP_ID > 0 then
    local success, result = pcall(function()
      return GroupService:GetRankInGroup(userId, LoggerConfig.DEV_AUTHENTICATION.GROUP_ID)
    end)

    if success and result >= LoggerConfig.DEV_AUTHENTICATION.MIN_RANK then
      return true
    end
  end

  return false
end

-- // GUI INITIALIZATION
function LoggerGUI.Initialize()
  if not LoggerGUI.IsUserDeveloper() then
    return -- Not a developer, don't initialize GUI
  end

  LoggerGUI.CreateGUI()
  LoggerGUI.SetupKeybinds()
  LoggerGUI.SetupChatCommands()

  print("LoggerGUI: Developer interface initialized")
end

function LoggerGUI.CreateGUI()
  -- Main ScreenGui
  local screenGui = Instance.new("ScreenGui")
  screenGui.Name = "RbxTraceGUI"
  screenGui.ResetOnSpawn = false
  screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
  screenGui.Parent = PlayerGui

  -- Main Frame
  MainFrame = Instance.new("Frame")
  MainFrame.Name = "MainFrame"
  MainFrame.Size = UDim2.new(0.8, 0, 0.8, 0)
  MainFrame.Position = UDim2.new(0.1, 0, 0.1, 0)
  MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
  MainFrame.BorderSizePixel = 0
  MainFrame.Visible = false
  MainFrame.Parent = screenGui

  -- Corner rounding
  local corner = Instance.new("UICorner")
  corner.CornerRadius = UDim.new(0, 8)
  corner.Parent = MainFrame

  -- Title Bar
  local titleBar = Instance.new("Frame")
  titleBar.Name = "TitleBar"
  titleBar.Size = UDim2.new(1, 0, 0, 40)
  titleBar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
  titleBar.BorderSizePixel = 0
  titleBar.Parent = MainFrame

  local titleCorner = Instance.new("UICorner")
  titleCorner.CornerRadius = UDim.new(0, 8)
  titleCorner.Parent = titleBar

  local titleLabel = Instance.new("TextLabel")
  titleLabel.Name = "TitleLabel"
  titleLabel.Size = UDim2.new(1, -100, 1, 0)
  titleLabel.Position = UDim2.new(0, 10, 0, 0)
  titleLabel.BackgroundTransparency = 1
  titleLabel.Text = "RbxTrace - SCP-THRESHER"
  titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
  titleLabel.TextSize = 18
  titleLabel.TextXAlignment = Enum.TextXAlignment.Left
  titleLabel.Font = Enum.Font.GothamBold
  titleLabel.Parent = titleBar

  -- Close Button
  local closeButton = Instance.new("TextButton")
  closeButton.Name = "CloseButton"
  closeButton.Size = UDim2.new(0, 30, 0, 30)
  closeButton.Position = UDim2.new(1, -35, 0, 5)
  closeButton.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
  closeButton.Text = "Ã—"
  closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
  closeButton.TextSize = 20
  closeButton.Font = Enum.Font.GothamBold
  closeButton.Parent = titleBar

  local closeCorner = Instance.new("UICorner")
  closeCorner.CornerRadius = UDim.new(0, 4)
  closeCorner.Parent = closeButton

  closeButton.MouseButton1Click:Connect(function()
    LoggerGUI.CloseGUI()
  end)

  -- Create main content area
  LoggerGUI.CreateContentArea()

  -- Make draggable
  LoggerGUI.MakeDraggable(MainFrame, titleBar)
end

function LoggerGUI.CreateContentArea()
  -- Top Controls Frame
  local controlsFrame = Instance.new("Frame")
  controlsFrame.Name = "ControlsFrame"
  controlsFrame.Size = UDim2.new(1, 0, 0, 80)
  controlsFrame.Position = UDim2.new(0, 0, 0, 40)
  controlsFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
  controlsFrame.BorderSizePixel = 0
  controlsFrame.Parent = MainFrame

  -- Search Box
  SearchBox = Instance.new("TextBox")
  SearchBox.Name = "SearchBox"
  SearchBox.Size = UDim2.new(0.3, -10, 0, 30)
  SearchBox.Position = UDim2.new(0, 10, 0, 10)
  SearchBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
  SearchBox.PlaceholderText = "Search logs..."
  SearchBox.Text = ""
  SearchBox.TextColor3 = Color3.fromRGB(255, 255, 255)
  SearchBox.TextSize = 14
  SearchBox.Font = Enum.Font.Gotham
  SearchBox.Parent = controlsFrame

  local searchCorner = Instance.new("UICorner")
  searchCorner.CornerRadius = UDim.new(0, 4)
  searchCorner.Parent = SearchBox

  -- Filter Dropdown
  LoggerGUI.CreateFilterDropdown(controlsFrame)

  -- Action Buttons
  LoggerGUI.CreateActionButtons(controlsFrame)

  -- Stats Display
  LoggerGUI.CreateStatsDisplay(controlsFrame)

  -- Log Container (Scrolling Frame)
  LogContainer = Instance.new("ScrollingFrame")
  LogContainer.Name = "LogContainer"
  LogContainer.Size = UDim2.new(1, 0, 1, -120)
  LogContainer.Position = UDim2.new(0, 0, 0, 120)
  LogContainer.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
  LogContainer.BorderSizePixel = 0
  LogContainer.ScrollBarThickness = 8
  LogContainer.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
  LogContainer.Parent = MainFrame

  local listLayout = Instance.new("UIListLayout")
  listLayout.SortOrder = Enum.SortOrder.LayoutOrder
  listLayout.Padding = UDim.new(0, 2)
  listLayout.Parent = LogContainer

  -- Search functionality
  local searchDebounce = nil
  SearchBox.Changed:Connect(function(property)
    if property == "Text" then
      if searchDebounce then
        task.cancel(searchDebounce)
      end
      searchDebounce = task.wait(LoggerConfig.GUI.SEARCH_DEBOUNCE_MS / 1000)
      LoggerGUI.ApplyFilters()
    end
  end)
end

function LoggerGUI.CreateFilterDropdown(parent)
  -- Level Filter
  local levelFilter = Instance.new("TextButton")
  levelFilter.Name = "LevelFilter"
  levelFilter.Size = UDim2.new(0.15, -5, 0, 30)
  levelFilter.Position = UDim2.new(0.3, 5, 0, 10)
  levelFilter.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
  levelFilter.Text = "All Levels"
  levelFilter.TextColor3 = Color3.fromRGB(255, 255, 255)
  levelFilter.TextSize = 12
  levelFilter.Font = Enum.Font.Gotham
  levelFilter.Parent = parent

  local levelCorner = Instance.new("UICorner")
  levelCorner.CornerRadius = UDim.new(0, 4)
  levelCorner.Parent = levelFilter

  -- Title Filter
  local titleFilter = Instance.new("TextButton")
  titleFilter.Name = "TitleFilter"
  titleFilter.Size = UDim2.new(0.15, -5, 0, 30)
  titleFilter.Position = UDim2.new(0.45, 5, 0, 10)
  titleFilter.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
  titleFilter.Text = "All Titles"
  titleFilter.TextColor3 = Color3.fromRGB(255, 255, 255)
  titleFilter.TextSize = 12
  titleFilter.Font = Enum.Font.Gotham
  titleFilter.Parent = parent

  local titleCorner = Instance.new("UICorner")
  titleCorner.CornerRadius = UDim.new(0, 4)
  titleCorner.Parent = titleFilter

  -- Server/Client Filter
  local contextFilter = Instance.new("TextButton")
  contextFilter.Name = "ContextFilter"
  contextFilter.Size = UDim2.new(0.15, -5, 0, 30)
  contextFilter.Position = UDim2.new(0.6, 5, 0, 10)
  contextFilter.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
  contextFilter.Text = "All Context"
  contextFilter.TextColor3 = Color3.fromRGB(255, 255, 255)
  contextFilter.TextSize = 12
  contextFilter.Font = Enum.Font.Gotham
  contextFilter.Parent = parent

  local contextCorner = Instance.new("UICorner")
  contextCorner.CornerRadius = UDim.new(0, 4)
  contextCorner.Parent = contextFilter

  -- Filter button clicks
  levelFilter.MouseButton1Click:Connect(function()
    LoggerGUI.ShowLevelFilterMenu(levelFilter)
  end)

  titleFilter.MouseButton1Click:Connect(function()
    LoggerGUI.ShowTitleFilterMenu(titleFilter)
  end)

  contextFilter.MouseButton1Click:Connect(function()
    LoggerGUI.ShowContextFilterMenu(contextFilter)
  end)
end

function LoggerGUI.CreateActionButtons(parent)
  -- Clear Logs Button
  local clearButton = Instance.new("TextButton")
  clearButton.Name = "ClearButton"
  clearButton.Size = UDim2.new(0.08, -5, 0, 30)
  clearButton.Position = UDim2.new(0.75, 5, 0, 10)
  clearButton.BackgroundColor3 = Color3.fromRGB(200, 100, 50)
  clearButton.Text = "Clear"
  clearButton.TextColor3 = Color3.fromRGB(255, 255, 255)
  clearButton.TextSize = 12
  clearButton.Font = Enum.Font.GothamBold
  clearButton.Parent = parent

  local clearCorner = Instance.new("UICorner")
  clearCorner.CornerRadius = UDim.new(0, 4)
  clearCorner.Parent = clearButton

  -- Export Button
  local exportButton = Instance.new("TextButton")
  exportButton.Name = "ExportButton"
  exportButton.Size = UDim2.new(0.08, -5, 0, 30)
  exportButton.Position = UDim2.new(0.83, 5, 0, 10)
  exportButton.BackgroundColor3 = Color3.fromRGB(50, 150, 200)
  exportButton.Text = "Export"
  exportButton.TextColor3 = Color3.fromRGB(255, 255, 255)
  exportButton.TextSize = 12
  exportButton.Font = Enum.Font.GothamBold
  exportButton.Parent = parent

  local exportCorner = Instance.new("UICorner")
  exportCorner.CornerRadius = UDim.new(0, 4)
  exportCorner.Parent = exportButton

  -- Pause/Resume Button
  local pauseButton = Instance.new("TextButton")
  pauseButton.Name = "PauseButton"
  pauseButton.Size = UDim2.new(0.08, -5, 0, 30)
  pauseButton.Position = UDim2.new(0.91, 5, 0, 10)
  pauseButton.BackgroundColor3 = Color3.fromRGB(100, 200, 100)
  pauseButton.Text = "Pause"
  pauseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
  pauseButton.TextSize = 12
  pauseButton.Font = Enum.Font.GothamBold
  pauseButton.Parent = parent

  local pauseCorner = Instance.new("UICorner")
  pauseCorner.CornerRadius = UDim.new(0, 4)
  pauseCorner.Parent = pauseButton

  -- Button functionality
  clearButton.MouseButton1Click:Connect(function()
    LoggerGUI.ClearLogs()
  end)

  exportButton.MouseButton1Click:Connect(function()
    LoggerGUI.ShowExportMenu()
  end)

  pauseButton.MouseButton1Click:Connect(function()
    LoggerGUI.TogglePause(pauseButton)
  end)

  -- Second row of controls
  local autoScrollToggle = Instance.new("TextButton")
  autoScrollToggle.Name = "AutoScrollToggle"
  autoScrollToggle.Size = UDim2.new(0.15, -5, 0, 25)
  autoScrollToggle.Position = UDim2.new(0, 10, 0, 45)
  autoScrollToggle.BackgroundColor3 = ScrollToBottom and Color3.fromRGB(50, 150, 50) or Color3.fromRGB(150, 50, 50)
  autoScrollToggle.Text = "Auto Scroll: " .. (ScrollToBottom and "ON" or "OFF")
  autoScrollToggle.TextColor3 = Color3.fromRGB(255, 255, 255)
  autoScrollToggle.TextSize = 10
  autoScrollToggle.Font = Enum.Font.Gotham
  autoScrollToggle.Parent = parent

  local autoScrollCorner = Instance.new("UICorner")
  autoScrollCorner.CornerRadius = UDim.new(0, 4)
  autoScrollCorner.Parent = autoScrollToggle

  autoScrollToggle.MouseButton1Click:Connect(function()
    ScrollToBottom = not ScrollToBottom
    autoScrollToggle.BackgroundColor3 = ScrollToBottom and Color3.fromRGB(50, 150, 50) or Color3.fromRGB(150, 50, 50)
    autoScrollToggle.Text = "Auto Scroll: " .. (ScrollToBottom and "ON" or "OFF")
  end)
end

function LoggerGUI.CreateStatsDisplay(parent)
  StatsFrame = Instance.new("Frame")
  StatsFrame.Name = "StatsFrame"
  StatsFrame.Size = UDim2.new(0.3, -10, 0, 25)
  StatsFrame.Position = UDim2.new(0.15, 10, 0, 45)
  StatsFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
  StatsFrame.BorderSizePixel = 0
  StatsFrame.Parent = parent

  local statsCorner = Instance.new("UICorner")
  statsCorner.CornerRadius = UDim.new(0, 4)
  statsCorner.Parent = StatsFrame

  local statsLabel = Instance.new("TextLabel")
  statsLabel.Name = "StatsLabel"
  statsLabel.Size = UDim2.new(1, -10, 1, 0)
  statsLabel.Position = UDim2.new(0, 5, 0, 0)
  statsLabel.BackgroundTransparency = 1
  statsLabel.Text = "Logs: 0 | Filtered: 0 | Memory: 0 KB"
  statsLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
  statsLabel.TextSize = 10
  statsLabel.TextXAlignment = Enum.TextXAlignment.Left
  statsLabel.Font = Enum.Font.Gotham
  statsLabel.Parent = StatsFrame
end

-- // GUI FUNCTIONALITY
function LoggerGUI.OpenGUI()
  if not LoggerGUI.IsUserDeveloper() or IsGUIOpen then
    return
  end

  IsGUIOpen = true
  MainFrame.Visible = true

  -- Start update loop
  UpdateConnection = RunService.Heartbeat:Connect(function()
    local currentTime = tick()
    if currentTime - LastUpdate >= (LoggerConfig.GUI.REFRESH_RATE_MS / 1000) then
      LoggerGUI.UpdateLogDisplay()
      LoggerGUI.UpdateStats()
      LastUpdate = currentTime
    end
  end)

  -- Animate in
  MainFrame.Size = UDim2.new(0, 0, 0, 0)
  MainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)

  local tween = TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
    Size = UDim2.new(0.8, 0, 0.8, 0),
    Position = UDim2.new(0.1, 0, 0.1, 0)
  })
  tween:Play()
end

function LoggerGUI.CloseGUI()
  if not IsGUIOpen then
    return
  end

  IsGUIOpen = false

  -- Stop update loop
  if UpdateConnection then
    UpdateConnection:Disconnect()
    UpdateConnection = nil
  end

  -- Animate out
  local tween = TweenService:Create(MainFrame, TweenInfo.new(0.2, Enum.EasingStyle.Back, Enum.EasingDirection.In), {
    Size = UDim2.new(0, 0, 0, 0),
    Position = UDim2.new(0.5, 0, 0.5, 0)
  })
  tween:Play()

  tween.Completed:Connect(function()
    MainFrame.Visible = false
  end)
end

function LoggerGUI.ToggleGUI()
  if IsGUIOpen then
    LoggerGUI.CloseGUI()
  else
    LoggerGUI.OpenGUI()
  end
end

-- // UPDATE SYSTEM
function LoggerGUI.UpdateLogDisplay()
  if not IsGUIOpen then
    return
  end

  local Logger = require(script.Parent.Logger)
  local logger = Logger.GetInstance()

  -- Get latest logs
  local logs = logger:GetLogs()

  -- Check if logs have changed
  if #logs == #CurrentLogs then
    local changed = false
    for i, log in ipairs(logs) do
      if not CurrentLogs[i] or CurrentLogs[i].id ~= log.id then
        changed = true
        break
      end
    end
    if not changed then
      return
    end
  end

  CurrentLogs = logs
  LoggerGUI.ApplyFilters()
end

function LoggerGUI.ApplyFilters()
  FilteredLogs = {}
  local searchText = SearchBox.Text:lower()

  for _, log in ipairs(CurrentLogs) do
    local matches = true

    -- Search filter
    if searchText ~= "" then
      local searchIn = (log.message or ""):lower() .. " " .. (log.title or ""):lower()
      if not string.find(searchIn, searchText) then
        matches = false
      end
    end

    -- Apply other filters
    if matches and CurrentFilters.level and log.level ~= CurrentFilters.level then
      matches = false
    end

    if matches and CurrentFilters.title and log.title ~= CurrentFilters.title then
      matches = false
    end

    if matches and CurrentFilters.server ~= nil and log.server ~= CurrentFilters.server then
      matches = false
    end

    if matches then
      table.insert(FilteredLogs, log)
    end
  end

  LoggerGUI.RefreshLogList()
end

function LoggerGUI.RefreshLogList()
  -- Clear existing log entries
  for _, child in ipairs(LogContainer:GetChildren()) do
    if child:IsA("Frame") and child.Name == "LogEntry" then
      child:Destroy()
    end
  end

  -- Limit displayed logs for performance
  local logsToShow = FilteredLogs
  if #logsToShow > LoggerConfig.GUI.MAX_DISPLAYED_LOGS then
    local startIndex = #logsToShow - LoggerConfig.GUI.MAX_DISPLAYED_LOGS + 1
    logsToShow = {}
    for i = startIndex, #FilteredLogs do
      table.insert(logsToShow, FilteredLogs[i])
    end
  end

  -- Create log entry frames
  for i, log in ipairs(logsToShow) do
    LoggerGUI.CreateLogEntry(log, i)
  end

  -- Update canvas size
  LogContainer.CanvasSize = UDim2.new(0, 0, 0, #logsToShow * 32)

  -- Auto scroll to bottom
  if ScrollToBottom and LoggerConfig.GUI.AUTO_SCROLL then
    LogContainer.CanvasPosition = Vector2.new(0, LogContainer.CanvasSize.Y.Offset)
  end
end

function LoggerGUI.CreateLogEntry(log, index)
  local entry = Instance.new("Frame")
  entry.Name = "LogEntry"
  entry.Size = UDim2.new(1, -10, 0, 30)
  entry.Position = UDim2.new(0, 5, 0, (index - 1) * 32)
  entry.BackgroundColor3 = LoggerGUI.GetLogLevelColor(log.level)
  entry.BackgroundTransparency = 0.8
  entry.BorderSizePixel = 0
  entry.LayoutOrder = index
  entry.Parent = LogContainer

  local entryCorner = Instance.new("UICorner")
  entryCorner.CornerRadius = UDim.new(0, 2)
  entryCorner.Parent = entry

  -- Log text
  local logText = Instance.new("TextLabel")
  logText.Name = "LogText"
  logText.Size = UDim2.new(1, -10, 1, 0)
  logText.Position = UDim2.new(0, 5, 0, 0)
  logText.BackgroundTransparency = 1
  logText.Text = log:GetDisplayText()
  logText.TextColor3 = Color3.fromRGB(255, 255, 255)
  logText.TextSize = 11
  logText.TextXAlignment = Enum.TextXAlignment.Left
  logText.TextYAlignment = Enum.TextYAlignment.Center
  logText.Font = Enum.Font.RobotoMono
  logText.TextTruncate = Enum.TextTruncate.AtEnd
  logText.Parent = entry

  -- Click to view details
  local button = Instance.new("TextButton")
  button.Size = UDim2.new(1, 0, 1, 0)
  button.BackgroundTransparency = 1
  button.Text = ""
  button.Parent = entry

  button.MouseButton1Click:Connect(function()
    LoggerGUI.ShowLogDetails(log)
  end)
end

function LoggerGUI.GetLogLevelColor(level)
  local colors = {
    TRACE = Color3.fromRGB(100, 100, 100),
    DEBUG = Color3.fromRGB(0, 150, 255),
    INFO = Color3.fromRGB(0, 200, 100),
    WARN = Color3.fromRGB(255, 200, 0),
    ERROR = Color3.fromRGB(255, 100, 100),
    FATAL = Color3.fromRGB(200, 0, 200)
  }
  return colors[level] or colors.INFO
end

-- // UTILITY FUNCTIONS
function LoggerGUI.UpdateStats()
  if not StatsFrame or not StatsFrame:FindFirstChild("StatsLabel") then
    return
  end

  local statsLabel = StatsFrame.StatsLabel
  local memory = math.floor(collectgarbage("count"))

  statsLabel.Text = string.format("Logs: %d | Filtered: %d | Memory: %d KB", #CurrentLogs, #FilteredLogs, memory)
end

function LoggerGUI.SetupKeybinds()
  UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then
      return
    end

    if input.KeyCode == LoggerConfig.GUI.TOGGLE_KEYBIND then
      LoggerGUI.ToggleGUI()
    end
  end)
end

function LoggerGUI.SetupChatCommands()
  -- This would integrate with your chat system
  -- For now, just a basic implementation
  if TextChatService.ChatInputBarConfiguration then
    -- Modern TextChatService
    TextChatService.OnIncomingMessage = function(message)
      if message.Text == LoggerConfig.GUI.CHAT_COMMAND then
        LoggerGUI.ToggleGUI()
        return true -- Block the message
      end
      return false
    end
  end
end

-- // ADVANCED FEATURES (Export, Filters, etc.)
function LoggerGUI.ShowExportMenu()
  -- Implementation for export menu would go here
  -- This is a placeholder for the actual export functionality
  print("Export menu - to be implemented with Pastebin integration")
end

function LoggerGUI.MakeDraggable(frame, dragHandle)
  local dragging = false
  local dragStart = nil
  local startPos = nil

  dragHandle.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
      dragging = true
      dragStart = input.Position
      startPos = frame.Position
    end
  end)

  dragHandle.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
      local delta = input.Position - dragStart
      frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale,
        startPos.Y.Offset + delta.Y)
    end
  end)

  dragHandle.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
      dragging = false
    end
  end)
end

-- Additional menu functions would be implemented here
function LoggerGUI.ShowLevelFilterMenu(button)
end
function LoggerGUI.ShowTitleFilterMenu(button)
end
function LoggerGUI.ShowContextFilterMenu(button)
end
function LoggerGUI.ShowLogDetails(log)
end
function LoggerGUI.ClearLogs()
end
function LoggerGUI.TogglePause(button)
end

return LoggerGUI
